/**
 * Java microbenchmark harness: https://github.com/melix/jmh-gradle-plugin
 */
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'me.champeau.gradle.jmh'
apply plugin: 'eclipse'
apply plugin: 'idea'

idea.module {
  scopes.PROVIDED.plus += [ configurations.jmh ]
}

plugins.withType(EclipsePlugin) {
  project.eclipse.classpath.plusConfigurations += [ configurations.jmh ]
}

dependencies {
  afterEvaluate {
    jmh configurations.testCompile.allDependencies
  }
}

tasks.jmh {
  group = 'Benchmarks'
  description = 'Executes a Java microbenchmark'
}

jmhJar {
  mergeServiceFiles()
}

jmh {
  jmhVersion = '1.17.3'

  if (project.hasProperty('includePattern')) {
    include = project.includePattern
  } else {
    tasks.jmh.doFirst { throw new GradleException("jmh: includePattern expected") }
  }
  // Benchmark parameters: Seperated by '&' for parameter types, and ',' for multiple values
  if (project.hasProperty('benchmarkParameters')) {
    benchmarkParameters = data.split('&').inject([:]) { map, token ->
      token.split('=').with { map[it[0]] = it[1] }
    }
  }

  // Benchmark mode: Throughput/thrpt, AverageTime/avgt, SampleTime/sample, SingleShotTime/ss, All/all
  benchmarkMode = ['thrpt']
  // Available time units are: [m, s, ms, us, ns]
  timeUnit = 's'

  // Charts: http://nilskp.github.io/jmh-charts
  resultFormat = 'json'
  resultsFile = file("${buildDir}/reports/jmh/results.json")

  jvmArgs = '-server -Xmx2G -XX:+UseG1GC -XX:-UseBiasedLocking'
  warmupIterations = 10
  failOnError = true
  iterations = 10
  forceGC = true
  fork = 3
}
